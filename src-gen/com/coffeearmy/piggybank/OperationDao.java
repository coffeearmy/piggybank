package com.coffeearmy.piggybank;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.coffeearmy.piggybank.Operation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OPERATION.
*/
public class OperationDao extends AbstractDao<Operation, Long> {

    public static final String TABLENAME = "OPERATION";

    /**
     * Properties of entity Operation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Operation = new Property(1, int.class, "operation", false, "OPERATION");
        public final static Property Money = new Property(2, double.class, "money", false, "MONEY");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property AccountId = new Property(4, long.class, "accountId", false, "ACCOUNT_ID");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Type = new Property(6, Integer.class, "type", false, "TYPE");
    };

    private DaoSession daoSession;

    private Query<Operation> account_OperationsQuery;

    public OperationDao(DaoConfig config) {
        super(config);
    }
    
    public OperationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OPERATION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'OPERATION' INTEGER NOT NULL ," + // 1: operation
                "'MONEY' REAL NOT NULL ," + // 2: money
                "'DATE' INTEGER," + // 3: date
                "'ACCOUNT_ID' INTEGER NOT NULL ," + // 4: accountId
                "'DESCRIPTION' TEXT," + // 5: description
                "'TYPE' INTEGER);"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OPERATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Operation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOperation());
        stmt.bindDouble(3, entity.getMoney());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
        stmt.bindLong(5, entity.getAccountId());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
    }

    @Override
    protected void attachEntity(Operation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Operation readEntity(Cursor cursor, int offset) {
        Operation entity = new Operation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // operation
            cursor.getDouble(offset + 2), // money
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.getLong(offset + 4), // accountId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Operation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOperation(cursor.getInt(offset + 1));
        entity.setMoney(cursor.getDouble(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setAccountId(cursor.getLong(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Operation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Operation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "operations" to-many relationship of Account. */
    public List<Operation> _queryAccount_Operations(long accountId) {
        synchronized (this) {
            if (account_OperationsQuery == null) {
                QueryBuilder<Operation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AccountId.eq(null));
                queryBuilder.orderRaw("DATE ASC");
                account_OperationsQuery = queryBuilder.build();
            }
        }
        Query<Operation> query = account_OperationsQuery.forCurrentThread();
        query.setParameter(0, accountId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAccountDao().getAllColumns());
            builder.append(" FROM OPERATION T");
            builder.append(" LEFT JOIN ACCOUNT T0 ON T.'ACCOUNT_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Operation loadCurrentDeep(Cursor cursor, boolean lock) {
        Operation entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Account account = loadCurrentOther(daoSession.getAccountDao(), cursor, offset);
         if(account != null) {
            entity.setAccount(account);
        }

        return entity;    
    }

    public Operation loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Operation> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Operation> list = new ArrayList<Operation>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Operation> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Operation> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
